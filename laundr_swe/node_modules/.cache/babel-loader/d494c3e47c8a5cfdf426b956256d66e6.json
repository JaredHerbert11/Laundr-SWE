{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _Validators = _interopRequireDefault(require(\"./Validators\"));\n\nvar _NumberUtils = _interopRequireDefault(require(\"../utils/NumberUtils\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar PropValidators = /*#__PURE__*/function () {\n  function PropValidators() {\n    _classCallCheck(this, PropValidators);\n  }\n\n  _createClass(PropValidators, null, [{\n    key: \"validateValue\",\n    value: function validateValue(props) {\n      PropValidators.validateEmptyValue(props.allowEmptyValue, props.value);\n\n      if (props.allowEmptyValue && !props.value) {\n        return;\n      }\n\n      var value = _NumberUtils.default.getParsedValue(props.value, props.valueType);\n\n      if (!_Validators.default.isValidValue(value, props.valueType)) {\n        throw new Error('value must be a string that can be parsed to integer/decimal number depending on valueType');\n      }\n    }\n  }, {\n    key: \"validateEmptyValue\",\n    value: function validateEmptyValue(allowEmptyValue, value) {\n      if (!allowEmptyValue && !value) {\n        throw new Error('value is required');\n      }\n    }\n  }, {\n    key: \"validateDefaultValue\",\n    value: function validateDefaultValue(props) {\n      if (props.defaultValue !== undefined && !_Validators.default.isValidValue(props.defaultValue, props.valueType)) {\n        throw new Error('defaultValue must be integer/decimal number depending on valueType');\n      }\n    }\n  }, {\n    key: \"validateDoubleClickStepAmount\",\n    value: function validateDoubleClickStepAmount(props) {\n      if (!_Validators.default.isValidValue(props.doubleClickStepAmount, props.valueType)) {\n        throw new Error('doubleClickStepAmount must be integer/decimal number depending on valueType');\n      }\n\n      if (props.doubleClickStepAmount !== 0 && props.doubleClickStepAmount <= props.stepAmount) {\n        throw new Error('doubleClickStepAmount must be greater than stepAmount');\n      }\n    }\n  }, {\n    key: \"validateMinValue\",\n    value: function validateMinValue(props) {\n      if (props.minValue > props.maxValue) {\n        throw new Error('maxValue must greater than or equal to minValue');\n      }\n\n      PropValidators.validateMinOrMaxValue(props.valueType, props.minValue, 'minValue', props.maxLength);\n    }\n  }, {\n    key: \"validateMinOrMaxValue\",\n    value: function validateMinOrMaxValue(valueType, value, valueName, maxLength) {\n      if (!_Validators.default.isValidValue(value, valueType)) {\n        throw new Error(\"\".concat(valueName, \" must be integer/decimal number depending on valueType\"));\n      }\n\n      if (value.toString().length > maxLength) {\n        throw new Error(\"\".concat(valueName, \" does not fit in maxLength\"));\n      }\n    }\n  }, {\n    key: \"validateMaxLength\",\n    value: function validateMaxLength(props) {\n      _Validators.default.validatePositiveInteger(props.maxLength, 'maxLength');\n    }\n  }, {\n    key: \"validatePrecision\",\n    value: function validatePrecision(props) {\n      _Validators.default.validatePositiveInteger(props.precision, 'precision');\n    }\n  }, {\n    key: \"validateStepAmount\",\n    value: function validateStepAmount(props) {\n      if (!_Validators.default.isValidValue(props.stepAmount, props.valueType) || props.stepAmount <= 0) {\n        throw new Error('stepAmount must be a positive integer/decimal number depending on valueType');\n      }\n    }\n  }, {\n    key: \"validatePropsInDevelopmentMode\",\n    value: function validatePropsInDevelopmentMode(props) {\n      if (process.env.NODE_ENV === 'development') {\n        PropValidators.validateValue(props);\n        PropValidators.validateDefaultValue(props);\n        PropValidators.validateDoubleClickStepAmount(props);\n        PropValidators.validateMinValue(props);\n        PropValidators.validateMaxValue(props);\n        PropValidators.validateMaxLength(props);\n        PropValidators.validatePrecision(props);\n        PropValidators.validateStepAmount(props);\n      }\n    }\n  }]);\n\n  return PropValidators;\n}();\n\nexports.default = PropValidators;\n\n_defineProperty(PropValidators, \"validateMaxValue\", function (props) {\n  return PropValidators.validateMinOrMaxValue(props.valueType, props.maxValue, 'maxValue', props.maxLength);\n});","map":{"version":3,"sources":["../../src/validators/PropValidators.js"],"names":["PropValidators","props","value","NumberUtils","Validators","allowEmptyValue","valueType","valueName","maxLength","process"],"mappings":"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","sourcesContent":["// @flow\n\n// $FlowFixMe\nimport type { Props, ValueType } from '../types/Types';\n// $FlowFixMe\nimport Validators from './Validators';\n// $FlowFixMe\nimport NumberUtils from '../utils/NumberUtils';\n\nexport default class PropValidators {\n  static validateValue(props: Props) {\n    PropValidators.validateEmptyValue(props.allowEmptyValue, props.value);\n    if (props.allowEmptyValue && !props.value) {\n      return;\n    }\n    const value = NumberUtils.getParsedValue(props.value, props.valueType);\n    if (!Validators.isValidValue(value, props.valueType)) {\n      throw new Error(\n        'value must be a string that can be parsed to integer/decimal number depending on valueType'\n      );\n    }\n  }\n\n  static validateEmptyValue(allowEmptyValue: boolean, value: string) {\n    if (!allowEmptyValue && !value) {\n      throw new Error('value is required');\n    }\n  }\n\n  static validateDefaultValue(props: Props) {\n    if (props.defaultValue !== undefined && !Validators.isValidValue(props.defaultValue, props.valueType)) {\n      throw new Error('defaultValue must be integer/decimal number depending on valueType');\n    }\n  }\n\n  static validateDoubleClickStepAmount(props: Props) {\n    if (!Validators.isValidValue(props.doubleClickStepAmount, props.valueType)) {\n      throw new Error('doubleClickStepAmount must be integer/decimal number depending on valueType');\n    }\n    if (props.doubleClickStepAmount !== 0 && props.doubleClickStepAmount <= props.stepAmount) {\n      throw new Error('doubleClickStepAmount must be greater than stepAmount');\n    }\n  }\n\n  static validateMinValue(props: Props) {\n    if (props.minValue > props.maxValue) {\n      throw new Error('maxValue must greater than or equal to minValue');\n    }\n    PropValidators.validateMinOrMaxValue(props.valueType, props.minValue, 'minValue', props.maxLength);\n  }\n\n  static validateMaxValue = (props: Props) =>\n    PropValidators.validateMinOrMaxValue(props.valueType, props.maxValue, 'maxValue', props.maxLength);\n\n  static validateMinOrMaxValue(valueType: ValueType, value: number, valueName: string, maxLength: number) {\n    if (!Validators.isValidValue(value, valueType)) {\n      throw new Error(`${valueName} must be integer/decimal number depending on valueType`);\n    }\n    if (value.toString().length > maxLength) {\n      throw new Error(`${valueName} does not fit in maxLength`);\n    }\n  }\n\n  static validateMaxLength(props: Props) {\n    Validators.validatePositiveInteger(props.maxLength, 'maxLength');\n  }\n\n  static validatePrecision(props: Props) {\n    Validators.validatePositiveInteger(props.precision, 'precision');\n  }\n\n  static validateStepAmount(props: Props) {\n    if (!Validators.isValidValue(props.stepAmount, props.valueType) || props.stepAmount <= 0) {\n      throw new Error('stepAmount must be a positive integer/decimal number depending on valueType');\n    }\n  }\n\n  static validatePropsInDevelopmentMode(props: Props) {\n    if (process.env.NODE_ENV === 'development') {\n      PropValidators.validateValue(props);\n      PropValidators.validateDefaultValue(props);\n      PropValidators.validateDoubleClickStepAmount(props);\n      PropValidators.validateMinValue(props);\n      PropValidators.validateMaxValue(props);\n      PropValidators.validateMaxLength(props);\n      PropValidators.validatePrecision(props);\n      PropValidators.validateStepAmount(props);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}