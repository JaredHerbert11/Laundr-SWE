{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _Validators = _interopRequireDefault(require(\"../validators/Validators\"));\n\nvar _NumberUtils = _interopRequireDefault(require(\"./NumberUtils\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nvar ButtonUtils = /*#__PURE__*/function () {\n  function ButtonUtils() {\n    _classCallCheck(this, ButtonUtils);\n  }\n\n  _createClass(ButtonUtils, null, [{\n    key: \"isDisabledButton\",\n    value: function isDisabledButton(buttonType, _ref) {\n      var maxValue = _ref.maxValue,\n          minValue = _ref.minValue,\n          stepAmount = _ref.stepAmount,\n          value = _ref.value,\n          valueType = _ref.valueType;\n\n      var currentValue = _NumberUtils.default.getParsedValue(value, valueType);\n\n      var nextIncrementedValue = currentValue + stepAmount;\n      var nextDecrementedValue = currentValue - stepAmount;\n\n      if (buttonType === 'increment') {\n        return !_Validators.default.isValidValue(currentValue, valueType) || nextIncrementedValue > maxValue;\n      }\n\n      return !_Validators.default.isValidValue(currentValue, valueType) || nextDecrementedValue < minValue;\n    }\n  }, {\n    key: \"getButtonIconName\",\n    value: function getButtonIconName(buttonType, buttonPlacement) {\n      if (buttonPlacement === 'right') {\n        if (buttonType === 'increment') {\n          return 'caret up';\n        }\n\n        return 'caret down';\n      }\n\n      if (buttonType === 'increment') {\n        return 'plus';\n      }\n\n      return 'minus';\n    }\n  }]);\n\n  return ButtonUtils;\n}();\n\nexports.default = ButtonUtils;","map":{"version":3,"sources":["../../src/utils/ButtonUtils.js"],"names":["ButtonUtils","buttonType","maxValue","minValue","stepAmount","value","valueType","currentValue","NumberUtils","nextIncrementedValue","nextDecrementedValue","Validators","buttonPlacement"],"mappings":";;;;;;;AAKA,IAAA,WAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,0BAAA,CAAA,CAAA;;AAEA,IAAA,YAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,eAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAEqBA,W;;;;;;;qCAEjBC,U,QAES;AAAA,UADPC,QACO,GAAA,IAAA,CADPA,QACO;AAAA,UADGC,QACH,GAAA,IAAA,CADGA,QACH;AAAA,UADaC,UACb,GAAA,IAAA,CADaA,UACb;AAAA,UADyBC,KACzB,GAAA,IAAA,CADyBA,KACzB;AAAA,UADgCC,SAChC,GAAA,IAAA,CADgCA,SAChC;;AACT,UAAMC,YAAY,GAAGC,YAAAA,CAAAA,OAAAA,CAAAA,cAAAA,CAAAA,KAAAA,EAArB,SAAqBA,CAArB;;AACA,UAAMC,oBAAoB,GAAGF,YAAY,GAAzC,UAAA;AACA,UAAMG,oBAAoB,GAAGH,YAAY,GAAzC,UAAA;;AAEA,UAAIN,UAAU,KAAd,WAAA,EAAgC;AAC9B,eAAO,CAACU,WAAAA,CAAAA,OAAAA,CAAAA,YAAAA,CAAAA,YAAAA,EAAD,SAACA,CAAD,IAAqDF,oBAAoB,GAAhF,QAAA;AACD;;AACD,aAAO,CAACE,WAAAA,CAAAA,OAAAA,CAAAA,YAAAA,CAAAA,YAAAA,EAAD,SAACA,CAAD,IAAqDD,oBAAoB,GAAhF,QAAA;AACD;;;sCAEwBT,U,EAAwBW,e,EAA0C;AACzF,UAAIA,eAAe,KAAnB,OAAA,EAAiC;AAC/B,YAAIX,UAAU,KAAd,WAAA,EAAgC;AAC9B,iBAAA,UAAA;AACD;;AACD,eAAA,YAAA;AACD;;AAED,UAAIA,UAAU,KAAd,WAAA,EAAgC;AAC9B,eAAA,MAAA;AACD;;AACD,aAAA,OAAA;AACD","sourcesContent":["// @flow\n\n// $FlowFixMe\nimport type { ButtonPlacement, ButtonType, Props } from '../types/Types';\n// $FlowFixMe\nimport Validators from '../validators/Validators';\n// $FlowFixMe\nimport NumberUtils from './NumberUtils';\n\nexport default class ButtonUtils {\n  static isDisabledButton(\n    buttonType: ButtonType,\n    { maxValue, minValue, stepAmount, value, valueType }: Props\n  ): boolean {\n    const currentValue = NumberUtils.getParsedValue(value, valueType);\n    const nextIncrementedValue = currentValue + stepAmount;\n    const nextDecrementedValue = currentValue - stepAmount;\n\n    if (buttonType === 'increment') {\n      return !Validators.isValidValue(currentValue, valueType) || nextIncrementedValue > maxValue;\n    }\n    return !Validators.isValidValue(currentValue, valueType) || nextDecrementedValue < minValue;\n  }\n\n  static getButtonIconName(buttonType: ButtonType, buttonPlacement: ButtonPlacement): string {\n    if (buttonPlacement === 'right') {\n      if (buttonType === 'increment') {\n        return 'caret up';\n      }\n      return 'caret down';\n    }\n\n    if (buttonType === 'increment') {\n      return 'plus';\n    }\n    return 'minus';\n  }\n}\n"]},"metadata":{},"sourceType":"script"}