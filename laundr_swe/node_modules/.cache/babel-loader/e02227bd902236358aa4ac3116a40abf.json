{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n} // $FlowFixMe\n\n\nvar Validators = /*#__PURE__*/function () {\n  function Validators() {\n    _classCallCheck(this, Validators);\n  }\n\n  _createClass(Validators, null, [{\n    key: \"validatePositiveInteger\",\n    value: function validatePositiveInteger(value, valueName) {\n      if (!Number.isSafeInteger(value) || value < 1) {\n        throw new Error(\"\".concat(valueName, \" must be a positive integer\"));\n      }\n    }\n  }]);\n\n  return Validators;\n}();\n\nexports.default = Validators;\n\n_defineProperty(Validators, \"isValidValue\", function (value, valueType) {\n  return valueType === 'integer' && Number.isSafeInteger(value) || valueType === 'decimal' && Number.isFinite(value);\n});","map":{"version":3,"sources":["../../src/validators/Validators.js"],"names":["Validators","valueType","Number","value","valueName"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAEA;;;IAGqBA,U;;;;;;;4CAKYG,K,EAAeC,S,EAAmB;AAC/D,UAAI,CAACF,MAAM,CAANA,aAAAA,CAAD,KAACA,CAAD,IAAgCC,KAAK,GAAzC,CAAA,EAA+C;AAC7C,cAAM,IAAA,KAAA,CAAA,GAAA,MAAA,CAAA,SAAA,EAAN,6BAAM,CAAA,CAAN;AACD;AACF;;;;;;;;gBATkBH,U,kBACG,UAAA,KAAA,EAAA,SAAA,EAAA;AAAA,SACnBC,SAAS,KAATA,SAAAA,IAA2BC,MAAM,CAANA,aAAAA,CAA5B,KAA4BA,CAA3BD,IACAA,SAAS,KAATA,SAAAA,IAA2BC,MAAM,CAANA,QAAAA,CAFR,KAEQA,CAFR","sourcesContent":["// @flow\n\n// $FlowFixMe\nimport type { ValueType } from '../types/Types';\n\nexport default class Validators {\n  static isValidValue = (value: number, valueType: ValueType) =>\n    (valueType === 'integer' && Number.isSafeInteger(value)) ||\n    (valueType === 'decimal' && Number.isFinite(value));\n\n  static validatePositiveInteger(value: number, valueName: string) {\n    if (!Number.isSafeInteger(value) || value < 1) {\n      throw new Error(`${valueName} must be a positive integer`);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}