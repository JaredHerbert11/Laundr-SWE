{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\asus\\\\Documents\\\\Git\\\\Laundr-SWE\\\\laundr_swe\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nlet Scuba = {\n  id: \"Scuba\",\n  quantity: 0\n};\nlet Tuba = {\n  id: \"Tuba\",\n  quantity: 0\n};\n\nfunction App() {\n  //Cart state\n  let [cart, setCart] = useState([]); //UseEffect that runs whenever cart is changed\n\n  useEffect(() => {\n    //If the cart has been changed, and useEffect is called, update the local storage to match the cart\n    if (cart.length > 0) {\n      let stringCart = JSON.stringify(cart);\n      localStorage.setItem(\"cart\", stringCart);\n    } //If the cart is empty and local storage is not, then update cart to match local storage\n    else if (localStorage.getItem(\"cart\") !== \"undefined\" && localStorage.getItem(\"cart\") !== null) {\n        let localStorageCart = localStorage.getItem(\"cart\");\n        let localStorageArray = JSON.parse(localStorageCart);\n        setCart(localStorageArray);\n      }\n  }, [cart]); //When adding or removing one from cart, this function should be called \n  //amount is 1 or -1 depending on if the user wishes to add or remove one item from cart\n\n  function updateItem(item, amount) {\n    let cartCopy = [...cart];\n    let exister = cartCopy.find(it => it.id === item.id); //checks if the given item is in the cart, if not then call the add item function\n\n    if (!exister && amount > 0) {\n      addItem(item);\n    } //if item is not in cart and user wishes to remove from cart, leaves function to do nothing\n\n\n    if (!exister) return; //adjust the quantity of the item\n\n    exister.quantity += amount; //Checks if item quantity has dropped to zero, if so then remove from cart\n\n    if (exister.quantity <= 0) {\n      cartCopy = cartCopy.filter(it => it.id !== item.id);\n    } //If the cart was emptied through removing an item, clear the cart and local storage\n\n\n    if (cartCopy.length === 0) {\n      localStorage.clear();\n      cartCopy = [];\n    }\n\n    setCart(cartCopy);\n  }\n\n  function clearOneItem(item) {\n    let cartCopy = [...cart];\n    cartCopy = cartCopy.filter(thing => thing.id !== item.id);\n\n    if (cartCopy.length === 0) {\n      console.log(\"Trying to clear\");\n      localStorage.clear();\n      setCart([]);\n    }\n\n    console.log(\"Are you here?\");\n    setCart(cartCopy);\n  } //If item isn't in cart, push it into the cart\n\n\n  function addItem(item) {\n    let copyCart = [...cart];\n    item.quantity = 1;\n    copyCart.push(item);\n    setCart(copyCart);\n  } //Clears the cart as well as the local storage\n\n\n  function clearCart() {\n    localStorage.clear();\n    setCart([]);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, \" Cart Demo \"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, \" The cart will be remembered by your browser, you can refresh the page or even close + reopen your browser and the cart will be remembered\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => updateItem(Scuba, 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, \" Add a Scuba \"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => updateItem(Scuba, -1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, \" Remove a Scuba \"), /*#__PURE__*/React.createElement(\"button\", {\n    onCanPlay: () => clearOneItem(Scuba),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  }, \" Clear all Scuba \")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => updateItem(Tuba, 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }, \" Add a Tuba \"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => updateItem(Tuba, -1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }, \" Remove a Tuba \"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => clearOneItem(Tuba),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }, \" Clear all Tuba \")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: clearCart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }, \" Clear Cart \")), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, \" \", JSON.stringify(cart), \" \")));\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/asus/Documents/Git/Laundr-SWE/laundr_swe/src/App.js"],"names":["React","useState","useEffect","Scuba","id","quantity","Tuba","App","cart","setCart","length","stringCart","JSON","stringify","localStorage","setItem","getItem","localStorageCart","localStorageArray","parse","updateItem","item","amount","cartCopy","exister","find","it","addItem","filter","clear","clearOneItem","thing","console","log","copyCart","push","clearCart"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\n\r\nimport './App.css';\r\n\r\nlet Scuba = {\r\n  id : \"Scuba\",\r\n  quantity : 0\r\n}\r\n\r\nlet Tuba = {\r\n  id : \"Tuba\",\r\n  quantity : 0\r\n}\r\n\r\nfunction App() {\r\n  //Cart state\r\n  let [cart, setCart] = useState([]);\r\n\r\n  //UseEffect that runs whenever cart is changed\r\n  useEffect(() => {\r\n    //If the cart has been changed, and useEffect is called, update the local storage to match the cart\r\n    if (cart.length > 0){\r\n      let stringCart = JSON.stringify(cart);\r\n      localStorage.setItem(\"cart\", stringCart);\r\n    }\r\n\r\n    //If the cart is empty and local storage is not, then update cart to match local storage\r\n    else if (localStorage.getItem(\"cart\") !== \"undefined\" && localStorage.getItem(\"cart\") !== null){\r\n      let localStorageCart = localStorage.getItem(\"cart\");\r\n      let localStorageArray = JSON.parse(localStorageCart);\r\n      setCart(localStorageArray);\r\n    }\r\n  }, [cart])\r\n\r\n  //When adding or removing one from cart, this function should be called \r\n  //amount is 1 or -1 depending on if the user wishes to add or remove one item from cart\r\n  function updateItem(item, amount){\r\n\r\n    let cartCopy = [...cart];\r\n\r\n    let exister = cartCopy.find(it => it.id === item.id);\r\n\r\n    //checks if the given item is in the cart, if not then call the add item function\r\n    if (!exister && (amount > 0)){\r\n      addItem(item);\r\n    }\r\n\r\n    //if item is not in cart and user wishes to remove from cart, leaves function to do nothing\r\n    if (!exister) return;\r\n\r\n    //adjust the quantity of the item\r\n    exister.quantity += amount;\r\n\r\n    //Checks if item quantity has dropped to zero, if so then remove from cart\r\n    if (exister.quantity <= 0){\r\n      cartCopy = cartCopy.filter(it => it.id !== item.id);\r\n    }\r\n\r\n    //If the cart was emptied through removing an item, clear the cart and local storage\r\n    if (cartCopy.length === 0){\r\n      localStorage.clear();\r\n      cartCopy = [];\r\n    }\r\n\r\n    setCart(cartCopy);\r\n\r\n  }\r\n\r\n  function clearOneItem(item){\r\n    let cartCopy = [...cart];\r\n\r\n    cartCopy = cartCopy.filter(thing => thing.id !== item.id);\r\n\r\n    if (cartCopy.length === 0){\r\n      console.log(\"Trying to clear\");\r\n      localStorage.clear();\r\n      setCart([]);\r\n    }\r\n    console.log(\"Are you here?\")\r\n    setCart(cartCopy);\r\n  }\r\n\r\n  //If item isn't in cart, push it into the cart\r\n  function addItem(item){\r\n    let copyCart = [...cart];\r\n\r\n    item.quantity = 1;\r\n    copyCart.push(item);\r\n    setCart(copyCart);\r\n  }\r\n\r\n  //Clears the cart as well as the local storage\r\n  function clearCart() {\r\n    localStorage.clear();\r\n    setCart([]);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1> Cart Demo </h1>\r\n        <p> The cart will be remembered by your browser, you can refresh the page or even close + reopen\r\n            your browser and the cart will be remembered\r\n        </p>\r\n\r\n        <div>\r\n          <button onClick={() => updateItem(Scuba, 1)}> Add a Scuba </button>\r\n          <button onClick={() => updateItem(Scuba, -1)}> Remove a Scuba </button>\r\n          <button onCanPlay={() => clearOneItem(Scuba)}> Clear all Scuba </button>\r\n          </div>\r\n\r\n        <div>\r\n          <button onClick={() => updateItem(Tuba, 1)}> Add a Tuba </button>\r\n          <button onClick={() => updateItem(Tuba, -1)}> Remove a Tuba </button>\r\n          <button onClick={() => clearOneItem(Tuba)}> Clear all Tuba </button>\r\n        </div>\r\n\r\n        <div>\r\n          <button onClick={clearCart}> Clear Cart </button>\r\n        </div>\r\n\r\n      <p> {JSON.stringify(cart)} </p>\r\n\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}