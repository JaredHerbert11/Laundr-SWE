{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react'; //UseEffect that runs whenever cart is changed\n\nfunction cartState() {\n  _s();\n\n  let [cart, setCart] = useState([]);\n  useEffect(() => {\n    //If the cart has been changed, and useEffect is called, update the local storage to match the cart\n    if (cart.length > 0) {\n      let stringCart = JSON.stringify(cart);\n      localStorage.setItem(\"cart\", stringCart);\n    } //If the cart is empty and local storage is not, then update cart to match local storage\n    else if (localStorage.getItem(\"cart\") !== \"undefined\" && localStorage.getItem(\"cart\") !== null) {\n        let localStorageCart = localStorage.getItem(\"cart\");\n        let localStorageArray = JSON.parse(localStorageCart);\n        setCart(localStorageArray);\n      }\n\n    return [cart, setCart];\n  }, [cart]);\n} //When adding or removing one from cart, this function should be called \n//amount is 1 or -1 depending on if the user wishes to add or remove one item from cart\n\n\n_s(cartState, \"5+HPoxSo1E/C3go3F1eDhM/DDhE=\");\n\nfunction updateItem(item, amount) {\n  let cartCopy = [...cart];\n  let exister = cartCopy.find(it => it.id === item.id); //checks if the given item is in the cart, if not then call the add item function\n\n  if (!exister && amount > 0) {\n    addItem(item);\n  } //if item is not in cart and user wishes to remove from cart, leaves function to do nothing\n\n\n  if (!exister) return; //adjust the quantity of the item\n\n  exister.quantity += amount; //Checks if item quantity has dropped to zero, if so then remove from cart\n\n  if (exister.quantity <= 0) {\n    cartCopy = cartCopy.filter(it => it.id !== item.id);\n  } //If the cart was emptied through removing an item, clear the cart and local storage\n\n\n  if (cartCopy.length === 0) {\n    localStorage.clear();\n    cartCopy = [];\n  }\n\n  setCart(cartCopy);\n}\n\nfunction clearOneItem(item) {\n  let cartCopy = [...cart];\n  cartCopy = cartCopy.filter(thing => thing.id !== item.id);\n\n  if (cartCopy.length === 0) {\n    localStorage.clear();\n    setCart([]);\n  }\n\n  setCart(cartCopy);\n} //If item isn't in cart, push it into the cart\n\n\nfunction addItem(item) {\n  let copyCart = [...cart];\n  item.quantity = 1;\n  copyCart.push(item);\n  setCart(copyCart);\n} //Clears the cart as well as the local storage\n\n\nfunction clearCart() {\n  localStorage.clear();\n  setCart([]);\n}\n\nexport default {\n  cartState,\n  updateItem,\n  clearOneItem,\n  clearCart\n};","map":{"version":3,"sources":["C:/Users/asus/Documents/Git/Laundr-SWE/laundr_swe/src/controllers/cartFunctions.js"],"names":["React","useState","useEffect","cartState","cart","setCart","length","stringCart","JSON","stringify","localStorage","setItem","getItem","localStorageCart","localStorageArray","parse","updateItem","item","amount","cartCopy","exister","find","it","id","addItem","quantity","filter","clear","clearOneItem","thing","copyCart","push","clearCart"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\n\r\n\r\n//UseEffect that runs whenever cart is changed\r\nfunction cartState(){\r\n  let [cart, setCart] = useState([]);\r\n\r\n  useEffect(() => {\r\n    //If the cart has been changed, and useEffect is called, update the local storage to match the cart\r\n    if (cart.length > 0){\r\n      let stringCart = JSON.stringify(cart);\r\n      localStorage.setItem(\"cart\", stringCart);\r\n    }\r\n\r\n    //If the cart is empty and local storage is not, then update cart to match local storage\r\n    else if (localStorage.getItem(\"cart\") !== \"undefined\" && localStorage.getItem(\"cart\") !== null){\r\n      let localStorageCart = localStorage.getItem(\"cart\");\r\n      let localStorageArray = JSON.parse(localStorageCart);\r\n      setCart(localStorageArray);\r\n    }\r\n\r\n    return [cart, setCart];\r\n\r\n  }, [cart])\r\n}\r\n\r\n//When adding or removing one from cart, this function should be called \r\n//amount is 1 or -1 depending on if the user wishes to add or remove one item from cart\r\nfunction updateItem(item, amount){\r\n\r\n    let cartCopy = [...cart];\r\n\r\n    let exister = cartCopy.find(it => it.id === item.id);\r\n\r\n    //checks if the given item is in the cart, if not then call the add item function\r\n    if (!exister && (amount > 0)){\r\n      addItem(item);\r\n    }\r\n\r\n    //if item is not in cart and user wishes to remove from cart, leaves function to do nothing\r\n    if (!exister) return;\r\n\r\n    //adjust the quantity of the item\r\n    exister.quantity += amount;\r\n\r\n    //Checks if item quantity has dropped to zero, if so then remove from cart\r\n    if (exister.quantity <= 0){\r\n      cartCopy = cartCopy.filter(it => it.id !== item.id);\r\n    }\r\n\r\n    //If the cart was emptied through removing an item, clear the cart and local storage\r\n    if (cartCopy.length === 0){\r\n      localStorage.clear();\r\n      cartCopy = [];\r\n    }\r\n\r\n    setCart(cartCopy);\r\n\r\n}\r\n\r\n\r\nfunction clearOneItem(item){\r\n    let cartCopy = [...cart];\r\n\r\n    cartCopy = cartCopy.filter(thing => thing.id !== item.id);\r\n\r\n    if (cartCopy.length === 0){\r\n      localStorage.clear();\r\n      setCart([]);\r\n    }\r\n\r\n    setCart(cartCopy);\r\n}\r\n\r\n//If item isn't in cart, push it into the cart\r\nfunction addItem(item){\r\n    let copyCart = [...cart];\r\n\r\n    item.quantity = 1;\r\n    copyCart.push(item);\r\n    setCart(copyCart);\r\n}\r\n\r\n//Clears the cart as well as the local storage\r\nfunction clearCart() {\r\n    localStorage.clear();\r\n    setCart([]);\r\n}\r\n\r\nexport default {cartState, updateItem, clearOneItem, clearCart};"]},"metadata":{},"sourceType":"module"}