{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\n\nfunction useStatelocal() {\n  _s();\n\n  //Cart state\n  let [cart, setCart] = useState([]); //useEffect that runs whenever cart is changed\n\n  useEffect(() => {\n    //If the cart has been changed, and useEffect is called, update the local storage to match the cart\n    if (cart.length > 0) {\n      let stringCart = JSON.stringify(cart);\n      localStorage.setItem(\"cart\", stringCart);\n    } //If the cart is empty and local storage is not, then update cart to match local storage\n    else if (localStorage.getItem(\"cart\") !== \"undefined\" && localStorage.getItem(\"cart\") !== null) {\n        let localStorageCart = localStorage.getItem(\"cart\");\n        let localStorageArray = JSON.parse(localStorageCart);\n        setCart(localStorageArray);\n      }\n  }, [cart]);\n  return [cart, setCart];\n} //When adding or removing one from cart, this function should be called \n//amount is 1 or -1 depending on if the user wishes to add or remove one item from cart\n\n\n_s(useStatelocal, \"5+HPoxSo1E/C3go3F1eDhM/DDhE=\");\n\nfunction updateItem(cart, setCart, item, amount) {\n  let cartCopy = [...cart];\n  let exister = cartCopy.find(it => it.id === item.id); //checks if the given item is in the cart, if not then call the add item function\n\n  if (!exister && amount > 0) {\n    item.quantity = 1;\n    cartCopy.push(item);\n    setCart(cartCopy);\n    return;\n  } //if item is not in cart and user wishes to remove from cart, leaves function to do nothing\n\n\n  if (!exister) return; //adjust the quantity of the item\n\n  exister.quantity += amount; //Checks if item quantity has dropped to zero, if so then remove from cart\n\n  if (exister.quantity <= 0) {\n    cartCopy = cartCopy.filter(it => it.id !== item.id);\n  } //If the cart was emptied through removing an item, clear the cart and local storage\n\n\n  if (cartCopy.length === 0) {\n    localStorage.clear();\n    cartCopy = [];\n  }\n\n  setCart(cartCopy);\n}\n\nfunction clearOneItem(cart, setCart, item) {\n  let cartCopy = [...cart];\n  cartCopy = cartCopy.filter(thing => thing.id !== item.id);\n\n  if (cartCopy.length === 0) {\n    localStorage.clear();\n    setCart([]);\n  }\n\n  setCart(cartCopy);\n} //Clears the cart as well as the local storage\n\n\nfunction clearCart(setCart) {\n  localStorage.clear();\n  setCart([]);\n}\n\nexport { useStatelocal, updateItem, clearOneItem, clearCart };","map":{"version":3,"sources":["C:/Users/asus/Documents/Git/Laundr-SWE/laundr_swe/src/controllers/cartFunctions.js"],"names":["React","useState","useEffect","useStatelocal","cart","setCart","length","stringCart","JSON","stringify","localStorage","setItem","getItem","localStorageCart","localStorageArray","parse","updateItem","item","amount","cartCopy","exister","find","it","id","quantity","push","filter","clear","clearOneItem","thing","clearCart"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;AAEA,SAASC,aAAT,GAAyB;AAAA;;AACvB;AACA,MAAI,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,EAAD,CAA9B,CAFuB,CAIvB;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAIE,IAAI,CAACE,MAAL,GAAc,CAAlB,EAAoB;AAClB,UAAIC,UAAU,GAAGC,IAAI,CAACC,SAAL,CAAeL,IAAf,CAAjB;AACAM,MAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BJ,UAA7B;AACD,KAHD,CAKA;AALA,SAMK,IAAIG,YAAY,CAACE,OAAb,CAAqB,MAArB,MAAiC,WAAjC,IAAgDF,YAAY,CAACE,OAAb,CAAqB,MAArB,MAAiC,IAArF,EAA0F;AAC7F,YAAIC,gBAAgB,GAAGH,YAAY,CAACE,OAAb,CAAqB,MAArB,CAAvB;AACA,YAAIE,iBAAiB,GAAGN,IAAI,CAACO,KAAL,CAAWF,gBAAX,CAAxB;AACAR,QAAAA,OAAO,CAACS,iBAAD,CAAP;AACD;AACF,GAbQ,EAaN,CAACV,IAAD,CAbM,CAAT;AAcA,SAAO,CAACA,IAAD,EAAOC,OAAP,CAAP;AACD,C,CAED;AACA;;;GAvBSF,a;;AAwBT,SAASa,UAAT,CAAoBZ,IAApB,EAA0BC,OAA1B,EAAmCY,IAAnC,EAAyCC,MAAzC,EAAgD;AAC5C,MAAIC,QAAQ,GAAG,CAAC,GAAGf,IAAJ,CAAf;AAEA,MAAIgB,OAAO,GAAGD,QAAQ,CAACE,IAAT,CAAcC,EAAE,IAAIA,EAAE,CAACC,EAAH,KAAUN,IAAI,CAACM,EAAnC,CAAd,CAH4C,CAK5C;;AACA,MAAI,CAACH,OAAD,IAAaF,MAAM,GAAG,CAA1B,EAA6B;AAC3BD,IAAAA,IAAI,CAACO,QAAL,GAAgB,CAAhB;AACAL,IAAAA,QAAQ,CAACM,IAAT,CAAcR,IAAd;AACAZ,IAAAA,OAAO,CAACc,QAAD,CAAP;AACA;AACD,GAX2C,CAa5C;;;AACA,MAAI,CAACC,OAAL,EAAc,OAd8B,CAgB5C;;AACAA,EAAAA,OAAO,CAACI,QAAR,IAAoBN,MAApB,CAjB4C,CAmB5C;;AACA,MAAIE,OAAO,CAACI,QAAR,IAAoB,CAAxB,EAA0B;AACxBL,IAAAA,QAAQ,GAAGA,QAAQ,CAACO,MAAT,CAAgBJ,EAAE,IAAIA,EAAE,CAACC,EAAH,KAAUN,IAAI,CAACM,EAArC,CAAX;AACD,GAtB2C,CAwB5C;;;AACA,MAAIJ,QAAQ,CAACb,MAAT,KAAoB,CAAxB,EAA0B;AACxBI,IAAAA,YAAY,CAACiB,KAAb;AACAR,IAAAA,QAAQ,GAAG,EAAX;AACD;;AAEDd,EAAAA,OAAO,CAACc,QAAD,CAAP;AAEH;;AAGD,SAASS,YAAT,CAAsBxB,IAAtB,EAA4BC,OAA5B,EAAqCY,IAArC,EAA0C;AACtC,MAAIE,QAAQ,GAAG,CAAC,GAAGf,IAAJ,CAAf;AAEAe,EAAAA,QAAQ,GAAGA,QAAQ,CAACO,MAAT,CAAgBG,KAAK,IAAIA,KAAK,CAACN,EAAN,KAAaN,IAAI,CAACM,EAA3C,CAAX;;AAEA,MAAIJ,QAAQ,CAACb,MAAT,KAAoB,CAAxB,EAA0B;AACxBI,IAAAA,YAAY,CAACiB,KAAb;AACAtB,IAAAA,OAAO,CAAC,EAAD,CAAP;AACD;;AAEDA,EAAAA,OAAO,CAACc,QAAD,CAAP;AACH,C,CAED;;;AACA,SAASW,SAAT,CAAmBzB,OAAnB,EAA4B;AACxBK,EAAAA,YAAY,CAACiB,KAAb;AACAtB,EAAAA,OAAO,CAAC,EAAD,CAAP;AACH;;AAED,SAAQF,aAAR,EAAuBa,UAAvB,EAAmCY,YAAnC,EAAiDE,SAAjD","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction useStatelocal() {\r\n  //Cart state\r\n  let [cart, setCart] = useState([]);\r\n\r\n  //useEffect that runs whenever cart is changed\r\n  useEffect(() => {\r\n    //If the cart has been changed, and useEffect is called, update the local storage to match the cart\r\n    if (cart.length > 0){\r\n      let stringCart = JSON.stringify(cart);\r\n      localStorage.setItem(\"cart\", stringCart);\r\n    }\r\n\r\n    //If the cart is empty and local storage is not, then update cart to match local storage\r\n    else if (localStorage.getItem(\"cart\") !== \"undefined\" && localStorage.getItem(\"cart\") !== null){\r\n      let localStorageCart = localStorage.getItem(\"cart\");\r\n      let localStorageArray = JSON.parse(localStorageCart);\r\n      setCart(localStorageArray);\r\n    }\r\n  }, [cart])\r\n  return [cart, setCart];\r\n}\r\n\r\n//When adding or removing one from cart, this function should be called \r\n//amount is 1 or -1 depending on if the user wishes to add or remove one item from cart\r\nfunction updateItem(cart, setCart, item, amount){\r\n    let cartCopy = [...cart];\r\n\r\n    let exister = cartCopy.find(it => it.id === item.id);\r\n\r\n    //checks if the given item is in the cart, if not then call the add item function\r\n    if (!exister && (amount > 0)){\r\n      item.quantity = 1;\r\n      cartCopy.push(item);\r\n      setCart(cartCopy);\r\n      return;\r\n    }\r\n\r\n    //if item is not in cart and user wishes to remove from cart, leaves function to do nothing\r\n    if (!exister) return;\r\n\r\n    //adjust the quantity of the item\r\n    exister.quantity += amount;\r\n\r\n    //Checks if item quantity has dropped to zero, if so then remove from cart\r\n    if (exister.quantity <= 0){\r\n      cartCopy = cartCopy.filter(it => it.id !== item.id);\r\n    }\r\n\r\n    //If the cart was emptied through removing an item, clear the cart and local storage\r\n    if (cartCopy.length === 0){\r\n      localStorage.clear();\r\n      cartCopy = [];\r\n    }\r\n\r\n    setCart(cartCopy);\r\n\r\n}\r\n\r\n\r\nfunction clearOneItem(cart, setCart, item){\r\n    let cartCopy = [...cart];\r\n\r\n    cartCopy = cartCopy.filter(thing => thing.id !== item.id);\r\n\r\n    if (cartCopy.length === 0){\r\n      localStorage.clear();\r\n      setCart([]);\r\n    }\r\n\r\n    setCart(cartCopy);\r\n}\r\n\r\n//Clears the cart as well as the local storage\r\nfunction clearCart(setCart) {\r\n    localStorage.clear();\r\n    setCart([]);\r\n}\r\n\r\nexport {useStatelocal, updateItem, clearOneItem, clearCart};"]},"metadata":{},"sourceType":"module"}