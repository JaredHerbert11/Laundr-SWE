{"ast":null,"code":"import React, { useState, useEffect } from 'react'; //When adding or removing one from cart, this function should be called \n//amount is 1 or -1 depending on if the user wishes to add or remove one item from cart\n\nfunction updateItem(cart, setCart, item, amount) {\n  let cartCopy = [...cart];\n  let exister = cartCopy.find(it => it.id === item.id); //checks if the given item is in the cart, if not then call the add item function\n\n  if (!exister && amount > 0) {\n    item.quantity = 1;\n    cartCopy.push(item);\n    setCart(cartCopy);\n    return;\n  } //if item is not in cart and user wishes to remove from cart, leaves function to do nothing\n\n\n  if (!exister) return; //adjust the quantity of the item\n\n  exister.quantity += amount; //Checks if item quantity has dropped to zero, if so then remove from cart\n\n  if (exister.quantity <= 0) {\n    cartCopy = cartCopy.filter(it => it.id !== item.id);\n  } //If the cart was emptied through removing an item, clear the cart and local storage\n\n\n  if (cartCopy.length === 0) {\n    localStorage.clear();\n    cartCopy = [];\n  }\n\n  setCart(cartCopy);\n}\n\nfunction clearOneItem(cart, setCart, item) {\n  let cartCopy = [...cart];\n  cartCopy = cartCopy.filter(thing => thing.id !== item.id);\n\n  if (cartCopy.length === 0) {\n    localStorage.clear();\n    setCart([]);\n  }\n\n  setCart(cartCopy);\n} //Clears the cart as well as the local storage\n\n\nfunction clearCart(setCart) {\n  localStorage.clear();\n  setCart([]);\n}\n\nexport { updateItem, clearOneItem, clearCart };","map":{"version":3,"sources":["C:/Users/asus/Documents/Git/Laundr-SWE/laundr_swe/src/controllers/cartFunctions.js"],"names":["React","useState","useEffect","updateItem","cart","setCart","item","amount","cartCopy","exister","find","it","id","quantity","push","filter","length","localStorage","clear","clearOneItem","thing","clearCart"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CAGA;AACA;;AACA,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,OAA1B,EAAmCC,IAAnC,EAAyCC,MAAzC,EAAgD;AAC5C,MAAIC,QAAQ,GAAG,CAAC,GAAGJ,IAAJ,CAAf;AAEA,MAAIK,OAAO,GAAGD,QAAQ,CAACE,IAAT,CAAcC,EAAE,IAAIA,EAAE,CAACC,EAAH,KAAUN,IAAI,CAACM,EAAnC,CAAd,CAH4C,CAK5C;;AACA,MAAI,CAACH,OAAD,IAAaF,MAAM,GAAG,CAA1B,EAA6B;AAC3BD,IAAAA,IAAI,CAACO,QAAL,GAAgB,CAAhB;AACAL,IAAAA,QAAQ,CAACM,IAAT,CAAcR,IAAd;AACAD,IAAAA,OAAO,CAACG,QAAD,CAAP;AACA;AACD,GAX2C,CAa5C;;;AACA,MAAI,CAACC,OAAL,EAAc,OAd8B,CAgB5C;;AACAA,EAAAA,OAAO,CAACI,QAAR,IAAoBN,MAApB,CAjB4C,CAmB5C;;AACA,MAAIE,OAAO,CAACI,QAAR,IAAoB,CAAxB,EAA0B;AACxBL,IAAAA,QAAQ,GAAGA,QAAQ,CAACO,MAAT,CAAgBJ,EAAE,IAAIA,EAAE,CAACC,EAAH,KAAUN,IAAI,CAACM,EAArC,CAAX;AACD,GAtB2C,CAwB5C;;;AACA,MAAIJ,QAAQ,CAACQ,MAAT,KAAoB,CAAxB,EAA0B;AACxBC,IAAAA,YAAY,CAACC,KAAb;AACAV,IAAAA,QAAQ,GAAG,EAAX;AACD;;AAEDH,EAAAA,OAAO,CAACG,QAAD,CAAP;AAEH;;AAGD,SAASW,YAAT,CAAsBf,IAAtB,EAA4BC,OAA5B,EAAqCC,IAArC,EAA0C;AACtC,MAAIE,QAAQ,GAAG,CAAC,GAAGJ,IAAJ,CAAf;AAEAI,EAAAA,QAAQ,GAAGA,QAAQ,CAACO,MAAT,CAAgBK,KAAK,IAAIA,KAAK,CAACR,EAAN,KAAaN,IAAI,CAACM,EAA3C,CAAX;;AAEA,MAAIJ,QAAQ,CAACQ,MAAT,KAAoB,CAAxB,EAA0B;AACxBC,IAAAA,YAAY,CAACC,KAAb;AACAb,IAAAA,OAAO,CAAC,EAAD,CAAP;AACD;;AAEDA,EAAAA,OAAO,CAACG,QAAD,CAAP;AACH,C,CAED;;;AACA,SAASa,SAAT,CAAmBhB,OAAnB,EAA4B;AACxBY,EAAAA,YAAY,CAACC,KAAb;AACAb,EAAAA,OAAO,CAAC,EAAD,CAAP;AACH;;AAED,SAAQF,UAAR,EAAoBgB,YAApB,EAAkCE,SAAlC","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\n\r\n//When adding or removing one from cart, this function should be called \r\n//amount is 1 or -1 depending on if the user wishes to add or remove one item from cart\r\nfunction updateItem(cart, setCart, item, amount){\r\n    let cartCopy = [...cart];\r\n\r\n    let exister = cartCopy.find(it => it.id === item.id);\r\n\r\n    //checks if the given item is in the cart, if not then call the add item function\r\n    if (!exister && (amount > 0)){\r\n      item.quantity = 1;\r\n      cartCopy.push(item);\r\n      setCart(cartCopy);\r\n      return;\r\n    }\r\n\r\n    //if item is not in cart and user wishes to remove from cart, leaves function to do nothing\r\n    if (!exister) return;\r\n\r\n    //adjust the quantity of the item\r\n    exister.quantity += amount;\r\n\r\n    //Checks if item quantity has dropped to zero, if so then remove from cart\r\n    if (exister.quantity <= 0){\r\n      cartCopy = cartCopy.filter(it => it.id !== item.id);\r\n    }\r\n\r\n    //If the cart was emptied through removing an item, clear the cart and local storage\r\n    if (cartCopy.length === 0){\r\n      localStorage.clear();\r\n      cartCopy = [];\r\n    }\r\n\r\n    setCart(cartCopy);\r\n\r\n}\r\n\r\n\r\nfunction clearOneItem(cart, setCart, item){\r\n    let cartCopy = [...cart];\r\n\r\n    cartCopy = cartCopy.filter(thing => thing.id !== item.id);\r\n\r\n    if (cartCopy.length === 0){\r\n      localStorage.clear();\r\n      setCart([]);\r\n    }\r\n\r\n    setCart(cartCopy);\r\n}\r\n\r\n//Clears the cart as well as the local storage\r\nfunction clearCart(setCart) {\r\n    localStorage.clear();\r\n    setCart([]);\r\n}\r\n\r\nexport {updateItem, clearOneItem, clearCart};"]},"metadata":{},"sourceType":"module"}