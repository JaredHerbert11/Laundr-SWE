{"ast":null,"code":"import React, { useState, useEffect } from 'react'; //When adding or removing one from cart, this function should be called \n//amount is 1 or -1 depending on if the user wishes to add or remove one item from cart\n\nfunction updateItem(cart, setCart, item, amount) {\n  console.log(item);\n  let cartCopy = [...cart];\n  let exister = cartCopy.find(it => it.id === item.id); //checks if the given item is in the cart, if not then call the add item function\n\n  if (!exister && amount > 0) {\n    addItem(...item);\n  } //if item is not in cart and user wishes to remove from cart, leaves function to do nothing\n\n\n  if (!exister) return; //adjust the quantity of the item\n\n  exister.quantity += amount; //Checks if item quantity has dropped to zero, if so then remove from cart\n\n  if (exister.quantity <= 0) {\n    cartCopy = cartCopy.filter(it => it.id !== item.id);\n  } //If the cart was emptied through removing an item, clear the cart and local storage\n\n\n  if (cartCopy.length === 0) {\n    localStorage.clear();\n    cartCopy = [];\n  }\n\n  setCart(cartCopy);\n}\n\nfunction clearOneItem(cart, setCart, item) {\n  let cartCopy = [...cart];\n  cartCopy = cartCopy.filter(thing => thing.id !== item.id);\n\n  if (cartCopy.length === 0) {\n    localStorage.clear();\n    setCart([]);\n  }\n\n  setCart(cartCopy);\n} //If item isn't in cart, push it into the cart\n\n\nfunction addItem(cart, setCart, item) {\n  let cartCopy = cart;\n  console.log(item);\n  console.log(\"Or this?\");\n  item.quantity += 1;\n  cartCopy.push(item);\n  setCart(cartCopy);\n} //Clears the cart as well as the local storage\n\n\nfunction clearCart(cart, setCart) {\n  localStorage.clear();\n  setCart([]);\n}\n\nexport { updateItem, clearOneItem, clearCart };","map":{"version":3,"sources":["C:/Users/asus/Documents/Git/Laundr-SWE/laundr_swe/src/controllers/cartFunctions.js"],"names":["React","useState","useEffect","updateItem","cart","setCart","item","amount","console","log","cartCopy","exister","find","it","id","addItem","quantity","filter","length","localStorage","clear","clearOneItem","thing","push","clearCart"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C,C,CAGA;AACA;;AACA,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,OAA1B,EAAmCC,IAAnC,EAAyCC,MAAzC,EAAgD;AAC5CC,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,MAAII,QAAQ,GAAG,CAAC,GAAGN,IAAJ,CAAf;AAEA,MAAIO,OAAO,GAAGD,QAAQ,CAACE,IAAT,CAAcC,EAAE,IAAIA,EAAE,CAACC,EAAH,KAAUR,IAAI,CAACQ,EAAnC,CAAd,CAJ4C,CAM5C;;AACA,MAAI,CAACH,OAAD,IAAaJ,MAAM,GAAG,CAA1B,EAA6B;AAC3BQ,IAAAA,OAAO,CAAC,GAAGT,IAAJ,CAAP;AACD,GAT2C,CAW5C;;;AACA,MAAI,CAACK,OAAL,EAAc,OAZ8B,CAc5C;;AACAA,EAAAA,OAAO,CAACK,QAAR,IAAoBT,MAApB,CAf4C,CAiB5C;;AACA,MAAII,OAAO,CAACK,QAAR,IAAoB,CAAxB,EAA0B;AACxBN,IAAAA,QAAQ,GAAGA,QAAQ,CAACO,MAAT,CAAgBJ,EAAE,IAAIA,EAAE,CAACC,EAAH,KAAUR,IAAI,CAACQ,EAArC,CAAX;AACD,GApB2C,CAsB5C;;;AACA,MAAIJ,QAAQ,CAACQ,MAAT,KAAoB,CAAxB,EAA0B;AACxBC,IAAAA,YAAY,CAACC,KAAb;AACAV,IAAAA,QAAQ,GAAG,EAAX;AACD;;AAEDL,EAAAA,OAAO,CAACK,QAAD,CAAP;AAEH;;AAGD,SAASW,YAAT,CAAsBjB,IAAtB,EAA4BC,OAA5B,EAAqCC,IAArC,EAA0C;AACtC,MAAII,QAAQ,GAAG,CAAC,GAAGN,IAAJ,CAAf;AAEAM,EAAAA,QAAQ,GAAGA,QAAQ,CAACO,MAAT,CAAgBK,KAAK,IAAIA,KAAK,CAACR,EAAN,KAAaR,IAAI,CAACQ,EAA3C,CAAX;;AAEA,MAAIJ,QAAQ,CAACQ,MAAT,KAAoB,CAAxB,EAA0B;AACxBC,IAAAA,YAAY,CAACC,KAAb;AACAf,IAAAA,OAAO,CAAC,EAAD,CAAP;AACD;;AAEDA,EAAAA,OAAO,CAACK,QAAD,CAAP;AACH,C,CAED;;;AACA,SAASK,OAAT,CAAiBX,IAAjB,EAAuBC,OAAvB,EAAgCC,IAAhC,EAAqC;AACjC,MAAII,QAAQ,GAAGN,IAAf;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;AACAH,EAAAA,IAAI,CAACU,QAAL,IAAiB,CAAjB;AACAN,EAAAA,QAAQ,CAACa,IAAT,CAAcjB,IAAd;AACAD,EAAAA,OAAO,CAACK,QAAD,CAAP;AACH,C,CAED;;;AACA,SAASc,SAAT,CAAmBpB,IAAnB,EAAyBC,OAAzB,EAAkC;AAC9Bc,EAAAA,YAAY,CAACC,KAAb;AACAf,EAAAA,OAAO,CAAC,EAAD,CAAP;AACH;;AAED,SAAQF,UAAR,EAAoBkB,YAApB,EAAkCG,SAAlC","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\n\r\n//When adding or removing one from cart, this function should be called \r\n//amount is 1 or -1 depending on if the user wishes to add or remove one item from cart\r\nfunction updateItem(cart, setCart, item, amount){\r\n    console.log(item);\r\n    let cartCopy = [...cart];\r\n\r\n    let exister = cartCopy.find(it => it.id === item.id);\r\n\r\n    //checks if the given item is in the cart, if not then call the add item function\r\n    if (!exister && (amount > 0)){\r\n      addItem(...item);\r\n    }\r\n\r\n    //if item is not in cart and user wishes to remove from cart, leaves function to do nothing\r\n    if (!exister) return;\r\n\r\n    //adjust the quantity of the item\r\n    exister.quantity += amount;\r\n\r\n    //Checks if item quantity has dropped to zero, if so then remove from cart\r\n    if (exister.quantity <= 0){\r\n      cartCopy = cartCopy.filter(it => it.id !== item.id);\r\n    }\r\n\r\n    //If the cart was emptied through removing an item, clear the cart and local storage\r\n    if (cartCopy.length === 0){\r\n      localStorage.clear();\r\n      cartCopy = [];\r\n    }\r\n\r\n    setCart(cartCopy);\r\n\r\n}\r\n\r\n\r\nfunction clearOneItem(cart, setCart, item){\r\n    let cartCopy = [...cart];\r\n\r\n    cartCopy = cartCopy.filter(thing => thing.id !== item.id);\r\n\r\n    if (cartCopy.length === 0){\r\n      localStorage.clear();\r\n      setCart([]);\r\n    }\r\n\r\n    setCart(cartCopy);\r\n}\r\n\r\n//If item isn't in cart, push it into the cart\r\nfunction addItem(cart, setCart, item){\r\n    let cartCopy = cart;\r\n    console.log(item);\r\n    console.log(\"Or this?\");\r\n    item.quantity += 1;\r\n    cartCopy.push(item);\r\n    setCart(cartCopy);\r\n}\r\n\r\n//Clears the cart as well as the local storage\r\nfunction clearCart(cart, setCart) {\r\n    localStorage.clear();\r\n    setCart([]);\r\n}\r\n\r\nexport {updateItem, clearOneItem, clearCart};"]},"metadata":{},"sourceType":"module"}